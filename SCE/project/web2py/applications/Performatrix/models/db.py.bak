# -*- coding: utf-8 -*-

#########################################################################
## This scaffolding model makes your app work on Google App Engine too
## File is released under public domain and you can use without limitations
#########################################################################

## if SSL/HTTPS is properly configured and you want all HTTP requests to
## be redirected to HTTPS, uncomment the line below:
# request.requires_https()

if not request.env.web2py_runtime_gae:
    ## if NOT running on Google App Engine use SQLite or other DB
    db = DAL('sqlite://storage.sqlite',pool_size=1,check_reserved=['all'])
else:
    ## connect to Google BigTable (optional 'google:datastore://namespace')
    db = DAL('google:datastore')
    ## store sessions and tickets there
    session.connect(request, response, db=db)
    ## or store session in Memcache, Redis, etc.
    ## from gluon.contrib.memdb import MEMDB
    ## from google.appengine.api.memcache import Client
    ## session.connect(request, response, db = MEMDB(Client()))

## by default give a view/generic.extension to all actions from localhost
## none otherwise. a pattern can be 'controller/function.extension'
response.generic_patterns = ['*'] if request.is_local else []
## (optional) optimize handling of static files
# response.optimize_css = 'concat,minify,inline'
# response.optimize_js = 'concat,minify,inline'

#########################################################################
## Here is sample code if you need for
## - email capabilities
## - authentication (registration, login, logout, ... )
## - authorization (role based authorization)
## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)
## - old style crud actions
## (more options discussed in gluon/tools.py)
#########################################################################

from gluon.tools import Auth, Crud, Service, PluginManager, prettydate
auth = Auth(db)
crud, service, plugins = Crud(db), Service(), PluginManager()

## create all tables needed by auth if not custom tables
auth.define_tables(username=False, signature=False)

## configure email
mail = auth.settings.mailer
mail.settings.server = 'logging' or 'smtp.gmail.com:587'
mail.settings.sender = 'you@gmail.com'
mail.settings.login = 'username:password'

## configure auth policy
auth.settings.registration_requires_verification = False
auth.settings.registration_requires_approval = False
auth.settings.reset_password_requires_verification = True

## if you need to use OpenID, Facebook, MySpace, Twitter, Linkedin, etc.
## register with janrain.com, write your domain:api_key in private/janrain.key
from gluon.contrib.login_methods.rpx_account import use_janrain
use_janrain(auth, filename='private/janrain.key')

db.define_table('role_table',
                db.Field('role_id', 'integer', required=True),
                db.Field('role_desc', 'string', required=True),
                migrate='role_table.table')


db.define_table('login_tab',
                db.Field('username', 'string', required=True),
                db.Field('password', 'password', required=True),
                db.Field('role_id', 'string', required=True),
				migrate='login_tab.table')

db.define_table('self_eval_tab',
				db.Field('EmployeeId', 'string', required=True),
				db.Field('Competency', 'integer', required=True),
				db.Field('Focussed', 'integer', required=True),
				db.Field('Adaptable', 'integer', required=True),
				db.Field('Consistent', 'integer', required=True),
				db.Field('Proactive' , 'integer', required=True),
				db.Field('OutOfBoxthinker', 'integer', required=True),
				db.Field('AbsentMinded', 'integer', required=True),
				db.Field('Optimistic', 'integer', required=True),
				db.Field('Uncompromising', 'integer', required=True),
				db.Field('Strategist', 'integer', required=True),
				db.Field('Overall', 'integer', required=True),
				migrate='self_eval_tab.table')
				
db.define_table('team_eval_tab',
				db.Field('username', 'string', required=True),
				db.Field('HumanCharacter', 'string', required=True),
				db.Field('Interpersonal', 'string', required=True),
				db.Field('BuildingTalent', 'string', required=True),
				db.Field('Leadership', 'string', required=True),
				db.Field('Communicatiom' , 'string', required=True),
				db.Field('JobPerformance', 'string', required=True),
				db.Field('MutualUnderstanding', 'string', required=True),
				db.Field('Knowledge', 'string', required=True),
				db.Field('SkillSet', 'string', required=True),
				db.Field('Capacity', 'string', required=True),
				db.Field('toverall', 'string', required=True),
				migrate='team_eval_tab.table')
				
db.define_table('emp_details_tab',
				db.Field('EmployeeId', 'string', required=True, unique=True),
				db.Field('FirstName', 'string', required=True),
				db.Field('LastName', 'string', required=True),
				db.Field('DOB', 'date', required=True),
				db.Field('CurrentPosition', 'string', required=True),
				db.Field('ProficientSkill' , 'string', required=True),
				db.Field('IntermediateSkill', 'string', required=True),
				db.Field('BasicSkill', 'string', required=True),
				db.Field('Comments', 'string', required=True),
				db.Field('ManagerId', 'string', required=True),
				migrate='emp_details_tab.table')

db.emp_details_tab.EmployeeId.requires = IS_NOT_IN_DB(db, 'emp_details_tab.EmployeeId')
db.emp_details_tab.FirstName.requires=IS_NOT_EMPTY()
db.emp_details_tab.LastName.requires=IS_NOT_EMPTY()
db.emp_details_tab.DOB.requires=IS_NOT_EMPTY()
db.emp_details_tab.DOB.requires=IS_DATE()
db.emp_details_tab.CurrentPosition.requires=IS_NOT_EMPTY()
db.emp_details_tab.ProficientSkill.requires=IS_NOT_EMPTY()
db.emp_details_tab.IntermediateSkill.requires=IS_NOT_EMPTY()
db.emp_details_tab.BasicSkill.requires=IS_NOT_EMPTY()
db.emp_details_tab.ManagerId.requires=IS_NOT_EMPTY()

#########################################################################
## Define your tables below (or better in another model file) for example
##
## >>> db.define_table('mytable',Field('myfield','string'))
##
## Fields can be 'string','text','password','integer','double','boolean'
##       'date','time','datetime','blob','upload', 'reference TABLENAME'
## There is an implicit 'id integer autoincrement' field
## Consult manual for more options, validators, etc.
##
## More API examples for controllers:
##
## >>> db.mytable.insert(myfield='value')
## >>> rows=db(db.mytable.myfield=='value').select(db.mytable.ALL)
## >>> for row in rows: print row.id, row.myfield
#########################################################################

## after defining tables, uncomment below to enable auditing
auth.enable_record_versioning(db)
